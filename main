from tkinter import *
from tkinter import ttk
import tkinter.messagebox
import mysql.connector

class MainDB:
    
    def __init__(self, root):
        self.root = root
        titlespace = " "
        self.root.title(titlespace + "SSIS v2")
        self.root.geometry("790x700+300+0")
        self.root.resizable(width=False, height=False)
        
        MainFrame = Frame(self.root, bd=10, width =770, height=700, relief = RIDGE, bg ='#957DAD')
        MainFrame.grid()
        
        TitleFrame = Frame(MainFrame, bd=7, width =770, height=100, relief = RIDGE, bg ='#E0BBE4')
        TitleFrame.grid(row = 0,column = 0)
        TopFrame3 = Frame(MainFrame, bd=5, width=770, height=500, relief = RIDGE, bg ='#E0BBE4')
        TopFrame3.grid(row=1,column=0)
        
        LeftFrame = Frame(TopFrame3, bd=5, width=770, height=400, padx=2, bg ='#957DAD', relief = RIDGE)
        LeftFrame.pack(side=LEFT)
        LeftFrame1= Frame(LeftFrame, bd=5, width=600, height=180, padx=2, pady=4, bg ='#E0BBE4', relief=RIDGE)
        LeftFrame1.pack(side=TOP, padx=0, pady=0)
        
        RightFrame1 = Frame(TopFrame3, bd=5, width=100, height=400, padx=2, bg ='#957DAD', relief = RIDGE)
        RightFrame1.pack(side=RIGHT)
        RightFrame1a = Frame(RightFrame1, bd=5, width=90, height=300, padx=2, pady=2, bg ='#E0BBE4', relief = RIDGE)
        RightFrame1a.pack(side=TOP, padx=0, pady=0)      
        
        StudentID = StringVar()
        Fullname = StringVar()
        Gender = StringVar()
        Yearlevel = StringVar()
        Course = StringVar()
        Coursecode = StringVar()
        
        def iExit ():
            iExit = tkinter.messagebox.askyesno (" SSIS", "Confirm if you want to exit")
            if iExit > 0:
                root.destroy()
                return 
            
        def Reset():
             self.entStudentID.delete(0, END)
             self.entFullname.delete(0, END)
             Gender.set("")
             Yearlevel.set("")
             self.entCourse.delete(0, END)
             self.entCoursecode.delete(0, END)
        
        def addData():
            if StudentID.get() == "" or Fullname.get() == "":
                tkinter.messagebox.showerror("SSIS", "Enter Correct Details")

            else:
                sqlCon = mysql.connector.connect(host="localhost", user="root", password="12345", database="SSISv2")
                cur = sqlCon.cursor()
                cur.execute("INSERT INTO student values(%s, %s, %s, %s, %s, %s )", (
                    StudentID.get(),
                    Fullname.get(),
                    Gender.get(),
                    Yearlevel.get(),
                    Course.get(),
                    Coursecode.get(),
                ))
                sqlCon.commit()
                sqlCon.close()
                tkinter.messagebox.showinfo ("SSIS", "Information Entered Successfully")
                
        def DisplayData():
            sqlCon = mysql.connector.connect(host="localhost", user="root", password="12345", database="SSISv2")
            cur = sqlCon.cursor()
            cur.execute("SELECT * FROM student")
            result = cur.fetchall()
            if len(result) != 0:
                self.student_records.delete(*self.student_records.get_children())
            for row in result:
                self.student_records.insert('', END, values=row)
                
            sqlCon.commit()
            sqlCon.close()
            
        def StudentInfo(ev):
            viewInfo = self.student_records.focus()
            learnerData = self.student_records.item(viewInfo)
            row = learnerData['values']
            StudentID.set(row[0]),
            Fullname.set(row[1]),
            Gender.set(row[2]),
            Yearlevel.set(row[3]),
            Course.set(row[4]),
            Coursecode.set(row[5])
            

        def update():
            sqlCon = mysql.connector.connect(host="localhost", user="root", password="12345", database="SSISv2")
            cur = sqlCon.cursor()
            cur.execute("UPDATE student SET fullname=%s, gender=%s, yearlevel=%s, course=%s, coursecode=%s WHERE studentID=%s", (
            Fullname.get(),
            Gender.get(),
            Yearlevel.get(),
            Course.get(),
            Coursecode.get(),
            StudentID.get()
                ))
            sqlCon.commit()
            sqlCon.close()
            tkinter.messagebox.showinfo("SSIS", "Record Updated Successfully")
            
        def deleteDB():
            sqlCon = mysql.connector.connect(host="localhost", user="root", password="12345", database="SSISv2")
            cur = sqlCon.cursor()
            cur.execute("DELETE FROM student WHERE studentID=%s", (StudentID.get(),))
            sqlCon.commit()
            DisplayData()
            sqlCon.close()
            tkinter.messagebox.showinfo("SSIS", "Information Deleted Successfully")
            Reset()
        
        def searchDB():
            try:
                sqlCon = mysql.connector.connect(host="localhost", user="root", password="12345", database="SSISv2")
                cur = sqlCon.cursor()
                cur.execute("SELECT * FROM student WHERE studentID=%s", (StudentID.get(),))
                
                row = cur.fetchall()
                
                StudentID.set(row[0])
                Fullname.set(row[1])
                Gender.set(row[2])
                Yearlevel.set(row[3])
                Course.set(row[4])
                Coursecode.set(row[5])
            
                sqlCon.commit()
            except:
                tkinter.messagebox.showinfo("SSIS", "No Information")
                Reset()
            
            sqlCon.close()
            


        self.lbltitle = Label(TitleFrame, font = ('Menlo', 21, 'bold'), text = "Simple Student Information System")
        self.lbltitle.grid(row = 0, column = 0, padx = 132) 
        
        self.lblStudentID = Label(LeftFrame1, font = ('arial', 12, 'bold'), text = "Student ID")
        self.lblStudentID.grid(row = 0, column = 0, sticky = W, padx = 5)  
        self.entStudentID = Entry(LeftFrame1, font = ('arial', 12), bd = 5, width = 44, justify = 'left', textvariable=StudentID)
        self.entStudentID.grid(row = 0, column = 1, sticky = W, padx = 5) 
        
        self.lblFullname = Label(LeftFrame1, font = ('arial', 12, 'bold'), text = "Full Name" )
        self.lblFullname.grid(row = 1, column = 0, sticky = W, padx = 5)  
        self.entFullname = Entry(LeftFrame1, font = ('arial', 12), bd = 5, width = 44, justify = 'left', textvariable=Fullname)
        self.entFullname.grid(row = 1, column = 1, sticky = W, padx = 5)
        
        self.lblGender = Label(LeftFrame1, font = ('arial', 12, 'bold'), text = "Gender")
        self.lblGender.grid(row = 2, column = 0, sticky = W, padx = 5)  
        self.cboGender = ttk.Combobox(LeftFrame1, font = ('arial', 12), width = 43, state = 'readonly', textvariable=Gender)
        self.cboGender['values'] = (' ', 'Female', 'Male')
        self.cboGender.current(0)
        self.cboGender.grid(row = 2, column = 1, sticky = W, padx = 5) 
        
        self.lblYearlevel = Label(LeftFrame1, font = ('arial', 12, 'bold'), text = "Year Level")
        self.lblYearlevel.grid(row = 3, column = 0, sticky = W, padx = 5)  
        self.cboYearlevel = ttk.Combobox(LeftFrame1, font = ('arial', 12), width = 43, state = 'readonly', textvariable=Yearlevel)
        self.cboYearlevel['values'] = (' ', '1st Year', '2nd Year', '3rd Year', '4th Year')
        self.cboYearlevel.current(0)
        self.cboYearlevel.grid(row = 3, column = 1, sticky = W, padx = 5)
        
        self.lblCourse = Label(LeftFrame1, font = ('arial', 12, 'bold'), text = "Course")
        self.lblCourse.grid(row = 4, column = 0, sticky = W, padx = 5)  
        self.entCourse = Entry(LeftFrame1, font = ('arial', 12), bd = 5, width = 44, justify = 'left', textvariable=Course)
        self.entCourse.grid(row = 4, column = 1, sticky = W, padx = 5) 
        
        self.lblCoursecode = Label(LeftFrame1, font = ('arial', 12, 'bold'), text = "Course Code")
        self.lblCoursecode.grid(row = 5, column = 0, sticky = W, padx = 5)  
        self.entCoursecode= Entry(LeftFrame1, font = ('arial', 12), bd = 5, width = 44, justify = 'left', textvariable=Coursecode)
        self.entCoursecode.grid(row = 5, column = 1, sticky = W, padx = 5) 
        
        scroll_y = Scrollbar(LeftFrame, orient = VERTICAL)
        
        self.student_records = ttk.Treeview(LeftFrame, height = 14, column = ("stid", "fullname", "gender", 
        "yearlevel", "course", "coursecode"), yscrollcommand = scroll_y.set )
        
        scroll_y.pack(side = RIGHT, fill = Y)
        self.student_records.heading("stid", text = "Student ID")
        self.student_records.heading("fullname", text = "Full Name")
        self.student_records.heading("gender", text = "Gender")
        self.student_records.heading("yearlevel", text = "Year Level")
        self.student_records.heading("course", text = "Course")
        self.student_records.heading("coursecode", text = "Course Code")
        
        self.student_records ['show' ] = 'headings' 
        
        self.student_records.column("stid", width = 40)
        self.student_records.column("fullname", width = 100)
        self.student_records.column("gender", width = 40)
        self.student_records.column("yearlevel", width = 40)
        self.student_records.column("course", width = 100)
        self.student_records.column("coursecode", width = 50)
        
        self.student_records.pack(fill = BOTH, expand = 1)
        self.student_records.bind("<ButtonRelease-1>", StudentInfo)
        
        
        self.btnAddNew = Button(RightFrame1a, font=('arial', '16', 'bold'), text="Add New ", 
                    bd=2, pady=1, padx=24, width=0, height = 2, command = addData).grid(row = 0, column = 0, padx = 1)
        
        self.btnDisplay = Button(RightFrame1a, font=('arial', '16', 'bold'), text="  Display  ", 
                    bd=2, pady=1, padx=24, width = 0, height = 2, command = DisplayData).grid(row = 1, column = 0, padx = 1)
        
        self.btnUpdate = Button(RightFrame1a, font=('arial', '16', 'bold'), text="  Update  ", 
                    bd=2, pady=1, padx=24, width = 0, height = 2, command = update).grid(row = 2, column = 0, padx = 1)
        
        self.btnDelete = Button(RightFrame1a, font=('arial', '16', 'bold'), text="  Delete   ", 
                    bd=2, pady=1, padx=24, width = 0, height = 2, command = deleteDB).grid(row = 3, column = 0, padx = 1)
        
        self.btnSearch = Button(RightFrame1a, font=('arial', '16', 'bold'), text="  Search  ", 
                    bd=2, pady=1, padx=24, width = 0, height = 2, command = searchDB).grid(row = 4, column = 0, padx = 1)
        
        self.btnReset = Button(RightFrame1a, font=('arial', '16', 'bold'), text="   Reset   ", 
                    bd=2, pady=1, padx=24, width = 0, height = 2, command = Reset).grid(row = 5, column = 0, padx = 1)
        
        self.btnExit = Button(RightFrame1a, font=('arial', '16', 'bold'), text="   Exit     ", 
                    bd=2, pady=1, padx=24, width = 0, height = 2, command = iExit).grid(row = 6, column = 0, padx = 1)


if __name__ == '__main__':
    root = Tk()
    application = MainDB(root)
    root.mainloop()
